From 27497d30a364c812ff96ff29667cc433a9f990df Mon Sep 17 00:00:00 2001
From: "Michael Mortlock-Chapman (z5359078)" <mmortlockchapman@gmail.com>
Date: Sat, 9 Mar 2024 15:14:25 +1100
Subject: [PATCH] completed componets for task

---
 src/App.tsx   | 21 +++++++++++++++------
 src/Graph.tsx | 14 ++++++++++++--
 2 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..f457f09 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,25 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>);
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let intervalGuard = 0
+    const intervalID = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({ data: serverResponds, showGraph: true });
+      });
+      intervalGuard++;
+      if (intervalGuard > 999) {
+        clearInterval(intervalID);
+      }
+    }, 100)
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..a4f32de 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,17 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    elem.setAttribute("view", "y_line");
+    elem.setAttribute("column-pivots", "[\"stock\"]");
+    elem.setAttribute("row-pivots", "[\"timestamp\"]");
+    elem.setAttribute("columns", "[\"top_ask_price\"]");
+    elem.setAttribute("aggregates", `{
+      "stock":"distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price":"avg",
+      "timestamp":"distinct count"
+    }`);
 
     const schema = {
       stock: 'string',
-- 
2.39.1.windows.1

